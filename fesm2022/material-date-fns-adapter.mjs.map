{"version":3,"file":"material-date-fns-adapter.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-date-fns-adapter/adapter/date-fns-adapter.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-date-fns-adapter/adapter/date-fns-formats.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-date-fns-adapter/adapter/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, inject} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material/core';\nimport {\n  Locale,\n  getMonth,\n  getYear,\n  getDate,\n  getDay,\n  getHours,\n  getMinutes,\n  getSeconds,\n  set,\n  getDaysInMonth,\n  formatISO,\n  addYears,\n  addMonths,\n  addDays,\n  addSeconds,\n  isValid,\n  isDate,\n  format,\n  parseISO,\n  parse,\n} from 'date-fns';\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n// date-fns doesn't have a way to read/print month names or days of the week directly,\n// so we get them by formatting a date with a format that produces the desired month/day.\nconst MONTH_FORMATS = {\n  long: 'LLLL',\n  short: 'LLL',\n  narrow: 'LLLLL',\n};\n\nconst DAY_OF_WEEK_FORMATS = {\n  long: 'EEEE',\n  short: 'EEE',\n  narrow: 'EEEEE',\n};\n\n/** Adds date-fns support to Angular Material. */\n@Injectable()\nexport class DateFnsAdapter extends DateAdapter<Date, Locale> {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n    this.setLocale(matDateLocale as Locale);\n  }\n\n  getYear(date: Date): number {\n    return getYear(date);\n  }\n\n  getMonth(date: Date): number {\n    return getMonth(date);\n  }\n\n  getDate(date: Date): number {\n    return getDate(date);\n  }\n\n  getDayOfWeek(date: Date): number {\n    return getDay(date);\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const pattern = MONTH_FORMATS[style];\n    return range(12, i => this.format(new Date(2017, i, 1), pattern));\n  }\n\n  getDateNames(): string[] {\n    const dtf =\n      typeof Intl !== 'undefined'\n        ? new Intl.DateTimeFormat(this.locale.code, {\n            day: 'numeric',\n            timeZone: 'utc',\n          })\n        : null;\n\n    return range(31, i => {\n      if (dtf) {\n        // date-fns doesn't appear to support this functionality.\n        // Fall back to `Intl` on supported browsers.\n        const date = new Date();\n        date.setUTCFullYear(2017, 0, i + 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return dtf.format(date).replace(/[\\u200e\\u200f]/g, '');\n      }\n\n      return i + '';\n    });\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const pattern = DAY_OF_WEEK_FORMATS[style];\n    return range(7, i => this.format(new Date(2017, 0, i + 1), pattern));\n  }\n\n  getYearName(date: Date): string {\n    return this.format(date, 'y');\n  }\n\n  getFirstDayOfWeek(): number {\n    return this.locale.options?.weekStartsOn ?? 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return getDaysInMonth(date);\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const result = new Date();\n    result.setFullYear(year, month, date);\n    result.setHours(0, 0, 0, 0);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: unknown, parseFormat: string | string[]): Date | null {\n    return this._parse(value, parseFormat);\n  }\n\n  format(date: Date, displayFormat: string): string {\n    if (!this.isValid(date)) {\n      throw Error('DateFnsAdapter: Cannot format invalid date.');\n    }\n\n    return format(date, displayFormat, {locale: this.locale});\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return addYears(date, years);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    return addMonths(date, months);\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return addDays(date, days);\n  }\n\n  toIso8601(date: Date): string {\n    return formatISO(date, {representation: 'date'});\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: unknown): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      const date = parseISO(value);\n      if (this.isValid(date)) {\n        return date;\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: unknown): obj is Date {\n    return isDate(obj);\n  }\n\n  isValid(date: Date): boolean {\n    return isValid(date);\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  override setTime(target: Date, hours: number, minutes: number, seconds: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (hours < 0 || hours > 23) {\n        throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n      }\n\n      if (minutes < 0 || minutes > 59) {\n        throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n      }\n\n      if (seconds < 0 || seconds > 59) {\n        throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n      }\n    }\n\n    return set(this.clone(target), {hours, minutes, seconds, milliseconds: 0});\n  }\n\n  override getHours(date: Date): number {\n    return getHours(date);\n  }\n\n  override getMinutes(date: Date): number {\n    return getMinutes(date);\n  }\n\n  override getSeconds(date: Date): number {\n    return getSeconds(date);\n  }\n\n  override parseTime(value: unknown, parseFormat: string | string[]): Date | null {\n    return this._parse(value, parseFormat, false);\n  }\n\n  override addSeconds(date: Date, amount: number): Date {\n    return addSeconds(date, amount);\n  }\n\n  private _parse(\n    value: unknown,\n    parseFormat: string | string[],\n    shouldTryParseIso = true,\n  ): Date | null {\n    if (typeof value == 'string' && value.length > 0) {\n      if (shouldTryParseIso) {\n        const iso8601Date = parseISO(value);\n\n        if (this.isValid(iso8601Date)) {\n          return iso8601Date;\n        }\n      }\n\n      const formats = Array.isArray(parseFormat) ? parseFormat : [parseFormat];\n\n      if (!parseFormat.length) {\n        throw Error('Formats array must not be empty.');\n      }\n\n      for (const currentFormat of formats) {\n        const fromFormat = parse(value, currentFormat, new Date(), {locale: this.locale});\n\n        if (this.isValid(fromFormat)) {\n          return fromFormat;\n        }\n      }\n\n      return this.invalid();\n    } else if (typeof value === 'number') {\n      return new Date(value);\n    } else if (value instanceof Date) {\n      return this.clone(value);\n    }\n\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MatDateFormats} from '@angular/material/core';\n\nexport const MAT_DATE_FNS_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'P',\n    timeInput: 'p',\n  },\n  display: {\n    dateInput: 'P',\n    timeInput: 'p',\n    monthYearLabel: 'LLL uuuu',\n    dateA11yLabel: 'PP',\n    monthYearA11yLabel: 'LLLL uuuu',\n    timeOptionLabel: 'p',\n  },\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {DateFnsAdapter} from './date-fns-adapter';\nimport {MAT_DATE_FNS_FORMATS} from './date-fns-formats';\n\nexport * from './date-fns-adapter';\nexport * from './date-fns-formats';\n\n@NgModule({\n  providers: [\n    {\n      provide: DateAdapter,\n      useClass: DateFnsAdapter,\n    },\n  ],\n})\nexport class DateFnsModule {}\n\n@NgModule({\n  providers: [provideDateFnsAdapter()],\n})\nexport class MatDateFnsModule {}\n\nexport function provideDateFnsAdapter(formats: MatDateFormats = MAT_DATE_FNS_FORMATS): Provider[] {\n  return [\n    {\n      provide: DateAdapter,\n      useClass: DateFnsAdapter,\n    },\n    {provide: MAT_DATE_FORMATS, useValue: formats},\n  ];\n}\n"],"names":["valuesArray","Array","length","i","valueFunction","short","long","DateFnsAdapter","DateAdapter","constructor","inject","MAT_DATE_LOCALE","optional","getYear","date","getDate","getDay","pattern","MONTH_FORMATS","style","range","format","Date","getDateNames","Intl","day","dtf","setUTCFullYear","setUTCHours","replace","getDayOfWeekNames","DAY_OF_WEEK_FORMATS","getYearName","getFirstDayOfWeek","locale","options","weekStartsOn","getNumDaysInMonth","getDaysInMonth","ngDevMode","month","Error","result","setFullYear","year","getMonth","today","parseFormat","_parse","value","displayFormat","addYears","years","addCalendarMonths","months","addMonths","addDays","days","representation","deserialize","isValid","isDateInstance","obj","invalid","NaN","MAT_DATE_FNS_FORMATS","dateInput","timeInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","ɵmod","i0","ɵɵngDeclareNgModule","minVersion","version","ngImport","type","DateFnsModule","ɵinj","ɵɵngDeclareInjector","providers","provide","useClass","decorators","MatDateFnsModule","deps","target","ɵɵFactoryTarget","NgModule","provideDateFnsAdapter"],"mappings":"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"}